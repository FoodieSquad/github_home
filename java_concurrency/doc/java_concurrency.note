1. 用并发解决的问题分为‘时间’ 和‘设计可管理性’两种。

2. 并发是用于多处理器编程的工具。并发通常是提高运行在单处理器上的程序的行能能。

3. 多任务和多线程是使用多处理器系统最合理方式。

4. 异常需要在run() 方法中捕获，不能跨线程传播回main()方法。

5. volatile 只有在状态真正独立于程序内其他内容和子集以前的值时才能使用。

6. 让步（yield）, 这只是一个暗示，没有任何机制会保证它将会被采纳。

7. 后台线程（daemon）,是指程序运行的事后在后台提供的一种通用服务的线程。当所有的非后台线程结束时，程序也会终止，
   同时也会杀死后台线程。如果父线程是一个后台线程，那么它创建的子线程都将是后台线程。

8. 后台线程不执行finally 子句的情况下就能退出run(),而非后台线程却会执行。

9. 线程组 继续错误的代价由别人承担，而承担错误的代价由自己承担。

10. 共享受限资源 在Java中递增（++a）不是原子操作。

11. 原子性与易变性 原子操作是不能被线程调度机制中断的操作。一旦操作开始，那么它一定可以在可能发生的“上下文切换”之前执行完毕。

12. 原子性可以应用于除long 和double 之外的所有基本类型之上的简单操作，对于读取和写入除long 和double 之外的基本类型变量这样的
    操作，可以保证它们会被当做不可分割的操作来操作内存。

13. JVM 可以将64位（long 和double）的读取和写入当做两个分离的32位操作来执行，这就产生了一个读取和写入操作中间发生上下文切换，
    从而导致不同的任务可以看到不正确结果的可能性。

14. volatile 关键字能够确保系统的可视性。只要对这个域产生了写操作，那么所有的读操作都姓看到这个修改。如果多个任务在同时访问
    某个域，那么这个域就应该是volatile。

15. 