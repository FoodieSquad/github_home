1. 本书学习完后，可以学习《Learning Python》。

2. 编程规则
   * 编写程序前要深思熟虑
   * 编写的程序应该要可读性强

3. 设置源文件的编码方式
   # -*- coding: UTF-8 -*-

4. 在交互模式下 a + _， [_] 表示上一次计算的结果。

5. 计算string 的长度，len()。

6. print ..， 语句后跟逗号避免输出换行。

7. for 循环会拥有一个else，当循环的条件为false 时会执行。当循环break 时，不会执行。

8. try 语句的else 会在没有异常的时候执行。

9. Python 函数的参数顺序即可以按参数的位置也可以根据参数的名字来确定。
   def fun(a, b = 10, c = "zhang"):
       pass
   调用
   fun(1, 10, zhang)
   fun(a = 1, b = 100)
   
10. 如果在语句或者表达式中的某个位置希望获得值，则赋值语句不能在这些位置使用。

11. 每种类型都有相关联的构造函数。int(), float(), str()。当有参数时，将该值转化为制定类型的新对象。

12.	Python 提供了Decimal 小数和Fraction 分数。为精确计算提供了可能。
    * Fraction + int -> Faction
    * Fraction + float -> float
    * Fraction + Fraction -> Fraction

13. 集合(Set) :唯一的，不可变的对象的无序集合。
    
14. 认为空对象（整数0、浮点数0.0、空字符串''）是假，认为所有非空对象是真。

15. Python 中的两种相等
    * 两个不同的名字关联的对象，具有相同的值
    * 两个不同的名字与同一个对象（即具有相同ID的对象）关联
    * == 检查两个名称引用的对象是否具有相同的值
    * is 检查两个名字是否引用同一个对象（具有相同的ID）

16. 对于两个浮点数，执行的不是全等测试，而是测试两者是否相近(delta = 0.0 000001
    if math.fabs(x - y) < delta

17. 关系运算符链
    aInt = 5
    0 <= aInt <= 2

18. 布尔运算符and or not。 and 的运算优先级大于or。

19. 关系运算符优先级
    ()                          圆括号
    **                          求幂
    +x, -x                      正的、负的
    *,/,%                       乘 除 求余
    +,-                         加 减
    <,<=,>,>=,!=,==             比较
    not x
    and
    or

20. 多重赋值
    aInt, bInt, cInt = 1, 2, 3
    交换两个值
    aInt, bInt = 2, 3
    tempInt = aInt
    aInt = bInt
    bInt = tempInt

    aInt,bInt = bInt, aInt

21. while 循环的else 当表达式的值为假时执行，可以看做是循环正常结束时的清理动作。

22. break 终结循环，continue 跳过while 循环剩余部分，回到while 循环的开始。

23. 用pylab 对数据绘图

24. 三重引号字符串将保留所有字符串的格式信息。

25. ord() 显示字符对应的整数值，chr() 给出整数对应的字符。

26. 字符串赋值得到的是副本，不是引用。

27. in 运算符用于检查集合的成员。 'a' in "zhang。Fraction + int -> Faction
    * Fraction + float -> float
    * Fraction + Fraction -> Fraction

13. 集合(Set) :唯一的，不可变的对象的无序集合。
    
14. 认为空对象（整数0、浮点数0.0、空字符串''）是假，认为所有非空对象是真。

15. Python 中的两种相等
    * 两个不同的名字关联的对象，具有相同的值
    * 两个不同的名字与同一个对象（即具有相同ID的对象）关联
    * == 检查两个名称引用的对象是否具有相同的值
    * is 检查两个名字是否引用同一个对象（具有相同的ID）

16. 对于两个浮点数，执行的不是全等测试，而是测试两者是否相近(delta = 0.0 000001
    if math.fabs(x - y) < delta

17. 关系运算符链
    aInt = 5
    0 <= aInt <= 2

18. 布尔运算符and or not。 and 的运算优先级大于or。

19. 关系运算符优先级
    ()                          圆括号
    **                          求幂
    +x, -x                      正的、负的
    *,/,%                       乘 除 求余
    +,-                         加 减
    <,<=,>,>=,!=,==             比较
    not x
    and
    or

20. 多重赋值
    aInt, bInt, cInt = 1, 2, 3
    交换两个值
    aInt, bInt = 2, 3
    tempInt = aInt
    aInt = bInt
    bInt = tempInt

    aInt,bInt = bInt, aInt

21. while 循环的else 当表达式的值为假时执行，可以看做是循环正常结束时的清理动作。

22. break 终结循环，continue 跳过while 循环剩余部分，回到while 循环的开始。

23. 用pylab 对数据绘图

24. 三重引号字符串将保留所有字符串的格式信息。

25. ord() 显示字符对应的整数值，chr() 给出整数对应的字符。

26. 字符串赋值得到的是副本，不是引用。

27. in 运算符用于检查集合的成员。 'a' in "zhang

28. 字符串的格式化输， print "%s is %d years old" % ("zhangzhaoyu, 24)。

29. 迭代器 enumerate。

30. L.sort()   

31. 每个不可变对象的操作都将创建指向新对象的引用。Python 的...表示无穷递归。

32. 深拷贝与浅拷贝。当变量引用不可变对象时，使用该变量的任何操作都将创建新对象，而不会改变引用的对象。与此相反，变量引用可变对象时，
    或可以创建新的对象，或者改变被引用的对象本身。
    
33. 元组 myTuple = (1, 2, 3)。元组使用圆括号创建，没有圆括号的表达式1, 2, 3 同样产生元组。创建单个元组不能用(1)，而是(1,)。

34. 从列表到元组 list1 = [1, 2, 3] tuple1 = tuple(list1) list2 = list(tuple1)

35. 列表解析的完整规则是表达式后跟for 从句，然后跟0 或多个if 或者for 从句。

36. 传递可变对象使得函数可以在主调程序中更改值。

37. 函数的参数传递还有两个特点，能采用默认值和能通过名称进行参数传递。默认值智能用于最右边的形参。

38. 在函数调用中使用参数名称作为关键字，在有多个参数和多个默认值时非常有用。程序员不用遵循标注顺序，
    直接制定需要改变的实参，其余的采用默认值即可。

39. 混合使用：
    * 实参不能出现2次，例如第一次出现视为实参，另一次则看做命名为argument 的形参
    * 提供所有必需的实参

40. 不要使用可变的默认值。如果必需使用可变的默认值，则要在函数定义中使用None 等作为默认值，然后在函数代码中
    对默认值进行验证。

41. 在Python 中定义函数即创建一个对象。与任何其他对象类似，函数对象也有方法和相关的变量。

42. 文档字符串在函数中使用三重引号分隔字符串。它必须出现标题行后面（紧跟def）。文档字符串是简洁的一行内容或者空行，
    其后跟随稍长的描述。

43. 字典和集合

44. Python 字典的键只能是不可改变的对象（如整数、字符串或元组）。
    dict.copy() 是浅拷贝，如果值是可变的，则可能出现前面所遇到的问题。

45. 集合通过调用集合的构造函数来创建。创建集合没有快捷方式，必须使用set 构造函数。set 构造函数至多有一个参数，还要是可迭代的。

46. 作用域搜寻规则（LEGB）
    * 本地的(Local)
    * 封闭的(Eclosing)
    * 全局的(Global）
    * 内置的(built-in)

47. 可以通过存储在每个模块中的字典 _dict_ 来查看这个命名空间。Python 解释器启动时，它将自动导入__main__ 和模块__builtins__。
    
48. global 语句。声明一个变量为全局的。

49. Python 指针：使用zip 创建字典。它从两个序列中创建成对的元素。
    
50. 文件是由字节组成的信息。文件分为两大类：文本文件和二进制文件。
    文件模式：
    "r"         只读
    "w"         只写
    "a"         只写，保留文件内容
    "r+"        读写 从文件开始处读或重写文件内容
    "w+"        读写 清除文件内容
    "a+"        读写 保留文件内容，将新数据添加到文件末尾

51. Python 提供"U"修饰符来处理文件中的换行问题。fd = open("file.txt", "rU")

52. CSV 文件。

53. 模块OS。
    
54. 类（class）定义实例、可能的属性和可在该实例上执行的操作。

55. 内置类和实例：Python 对象作用域规则：先实例，然后类

56. __init__ 方法没有显式的return 语句，因为__init__ 是创建实例过程中的一部分，所以Python 自动处理返回。

57. __str__ 表示实例的字符串方法。

58. Python 不强制进行类设计者和使用者的区分。所有的方法和实例变量都是公共的，类设计者和程序员都能访问。
    __attr 声明的属性在类外部访问被Python 模糊处理为__className__attr。

59. 自定义运算符重载， Python 提供了可重载的特殊运算符集合，只能重载该集合中的运算符。

60. Exception：任何事后都能引发异常，而不必等候Python 来引发。只需要使用raise 关键字加上异常的名称。
    raise exceptionName

61. 自动化测试doctest，Python 还提供了unittest 和nose 模块在更高级别运行测试。

62. 递归 计算机对函数的递归调用是通过栈这种数据结构来实现的。

63. 
    
	
    




    
